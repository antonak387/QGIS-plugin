# -*- coding: utf-8 -*-
"""
/***************************************************************************
 plug
                                 A QGIS plugin
 m
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-11-30
        git sha              : $Format:%H$
        copyright            : (C) 2023 by mumu
        email                : mumu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import processing
from qgis.PyQt import QtGui, QtWidgets
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QObject, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis.PyQt.QtWidgets import QAction, QMainWindow, QMessageBox
from qgis.PyQt.QtCore import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .design_dialog import designDialog
import os.path
from  qgis.core import *
from qgis.PyQt.QtGui import QColor


class design:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'design_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&plug')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('design', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon('C:\\Users\\User\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\\plugins\\design\\1.JPG')
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        
        

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/design/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&plug'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        print("RUN")
        """Run method that performs all the real work"""


        self.dlg = designDialog()

        self.dlg.stackedWidget.setCurrentIndex(0)
        self.dlg.pushButton_setTable.show()
        self.dlg.pushButton_change.hide()



        self.dlg.show()

        # Получение первого слоя карты
        first_layer = self.iface.mapCanvas().layer(0)

        # Проверка на наличие слоев

        try:
            self.dlg.mMapLayerComboBox.setCurrentText(first_layer.name())
            print(first_layer.name())
        except AttributeError:
            # Скрытие ненужных элементов интерфейса
            self.dlg.label_3.hide()
            self.dlg.label_2.hide()
            self.dlg.label.hide()
            self.dlg.mColorButton_2.hide()
            self.dlg.mColorButton.hide()
            self.dlg.pushButton_ok.hide()
              # Вывод сообщения об отсутствии слоев
            QMessageBox.information(self.dlg, "Внимание", "Слои не были найдены")
            return
     # Получение информации о типе геометрии слоя и установка соответствующих значений цветов
        try:
            if first_layer.geometryType() == 0:
                # Получение свойств символа слоя точек
                prop = first_layer.renderer().symbol().symbolLayer(0).properties()
                self.dlg.mColorButton.setColor(first_layer.renderer().symbol().color())
                # Извлечение значений цвета обводки точек
                r = int(prop['outline_color'].split(",")[0])
                g = int(prop['outline_color'].split(",")[1])
                b = int(prop['outline_color'].split(",")[2])
                a = int(prop['outline_color'].split(",")[3])
                print(r,g,b,a)
                self.dlg.mColorButton_2.setColor(QColor(r,g,b,a))
                
                # Получение свойств символа слоя линий
            if first_layer.geometryType() == 1:
                self.dlg.label_2.hide()
                self.dlg.mColorButton.hide()
                self.dlg.label_3.setText("Цвет линий ")


                prop = first_layer.renderer().symbol().symbolLayer(0).properties()
                r = int(prop['line_color'].split(",")[0])
                g = int(prop['line_color'].split(",")[1])
                b = int(prop['line_color'].split(",")[2])
                a = int(prop['line_color'].split(",")[3])
                print(r,g,b,a)
                self.dlg.mColorButton_2.setColor(QColor(r,g,b,a))

             # Получение свойств символа слоя полигон   
            if first_layer.geometryType() == 2:
                prop = first_layer.renderer().symbol().symbolLayer(0).properties()
                self.dlg.mColorButton.setColor(first_layer.renderer().symbol().color())
                r = int(prop['outline_color'].split(",")[0])
                g = int(prop['outline_color'].split(",")[1])
                b = int(prop['outline_color'].split(",")[2])
                a = int(prop['outline_color'].split(",")[3])
                print(r,g,b,a)
                self.dlg.mColorButton_2.setColor(QColor(r,g,b,a))

                print(QColor(r,g,b,a))
        except:
            QMessageBox.information(self.dlg, "Редактирование данного слоя невозможно ")

        # Скрытие ненужных элементов интерфейса
            self.dlg.label_3.hide()
            self.dlg.label_2.hide()
            self.dlg.label.hide()
            self.dlg.mColorButton_2.hide()
            self.dlg.mColorButton.hide()
            self.dlg.pushButton_ok.hide()

        def field_select():
            layer = self.dlg.mMapLayerComboBox.currentLayer()

          # Показываем элементов интерфейса
            self.dlg.label_3.show()
            self.dlg.label_2.show()
            self.dlg.label.show()
            self.dlg.mColorButton_2.show()
            self.dlg.mColorButton.show()
            self.dlg.pushButton_ok.show()

            try:
                currentSymbol = layer.renderer().symbol()
            except:
                QMessageBox.information(self.dlg, "Редактирование данного стиля невозможно")
           # Скрытие ненужных элементов интерфейса
                self.dlg.label_3.hide()
                self.dlg.label_2.hide()
                self.dlg.label.hide()
                self.dlg.mColorButton_2.hide()
                self.dlg.mColorButton.hide()
                self.dlg.pushButton_ok.hide()
                result = self.dlg.exec_()
                return

            self.dlg.label_2.show()
            self.dlg.mColorButton.show()
            self.dlg.label_3.setText("Внешний цвет ")

                # Fill color
                #color = symlayer.color() 
                #color = self.change_color(color, self.value)
                #symlayer.setColor(color)
            
            if layer.geometryType() == 0:
                prop = layer.renderer().symbol().symbolLayer(0).properties()
                self.dlg.mColorButton.setColor(layer.renderer().symbol().color())
                r = int(prop['outline_color'].split(",")[0])
                g = int(prop['outline_color'].split(",")[1])
                b = int(prop['outline_color'].split(",")[2])
                a = int(prop['outline_color'].split(",")[3])
                print(r,g,b,a)
                self.dlg.mColorButton_2.setColor(QColor(r,g,b,a))


                
            if layer.geometryType() == 1:
                self.dlg.label_2.hide()
                self.dlg.mColorButton.hide()
                self.dlg.label_3.setText("Цвет линий ")

                prop = layer.renderer().symbol().symbolLayer(0).properties()
                r = int(prop['line_color'].split(",")[0])
                g = int(prop['line_color'].split(",")[1])
                b = int(prop['line_color'].split(",")[2])
                a = int(prop['line_color'].split(",")[3])
                print(r,g,b,a)
                self.dlg.mColorButton_2.setColor(QColor(r,g,b,a))

                
            if layer.geometryType() == 2:
                prop = layer.renderer().symbol().symbolLayer(0).properties()
                self.dlg.mColorButton.setColor(layer.renderer().symbol().color())
                r = int(prop['outline_color'].split(",")[0])
                g = int(prop['outline_color'].split(",")[1])
                b = int(prop['outline_color'].split(",")[2])
                a = int(prop['outline_color'].split(",")[3])
                print(r,g,b,a)
                self.dlg.mColorButton_2.setColor(QColor(r,g,b,a))
    
                print(QColor(r,g,b,a))


        def apply_layer():
            layer = self.dlg.mMapLayerComboBox.currentLayer()

            # Получение выбранных цветов
            color = self.dlg.mColorButton.color()
            color2 = self.dlg.mColorButton_2.color()
            #effects = symlayer.paintEffect()
           # Создание заливочного символа с выбранными цветами
            if layer.geometryType() == 0:
                symb = QgsMarkerSymbol.createSimple({ 'color': color.name(), 'outline_color' : color2.name() }) 
            
            if layer.geometryType() == 1:
                symb = QgsLineSymbol.createSimple({'outline_color' : color2.name() }) #создание символа
            
            if layer.geometryType() == 2:
                symb = QgsFillSymbol.createSimple({ 'color': color.name(), 'outline_color' : color2.name() }) 
            layer.renderer().setSymbol(symb) 
            # Also show the changes in "Layer Styling" panel and TOC


           # Обновление отображения изменений в панели "Стили слоя" и в дереве слоев
            layer.triggerRepaint()
            self.iface.layerTreeView().refreshLayerSymbology(layer.id())
            print(layer.name())
            print(color)

        def back_design():
            self.dlg.stackedWidget.setCurrentIndex(0)
            self.dlg.tableWidget.setRowCount(0)
            self.dlg.pushButton_setTable.show()
            self.dlg.pushButton_change.hide()

        def back_geometry():
            self.dlg.stackedWidget.setCurrentIndex(1)


########################### Код Синициной А.Н. #############################################
        def id_change():
            self.dlg.tableWidget.setRowCount(0)
            self.dlg.pushButton_setTable.show()
            self.dlg.pushButton_change.show()
            self.dlg.pushButton_setTable.show()
            self.dlg.pushButton_change.hide()

        def set_table():
            layer = self.dlg.mMapLayerComboBox_2.currentLayer()
            print("SET_TABLE")
            try:
                proc = processing.run("native:extractvertices", {"INPUT": layer, "OUTPUT": 'TEMPORARY_OUTPUT'})
            except:
                QMessageBox.information(self.dlg, "Внимание", "Выберите векторный слой ")
                return
            outputlayer = proc['OUTPUT']

            proc_res = processing.run("qgis:exportaddgeometrycolumns",
                                      {"INPUT": outputlayer, "OUTPUT": 'TEMPORARY_OUTPUT'})
            layer_res = proc_res['OUTPUT']
            dpr = layer_res.dataProvider()
            self.dlg.tableWidget.setRowCount(0)

            for box in layer_res.getFeatures():
                print(box)
                print(box['id'])
                if box['id'] == self.dlg.spinBox.value():
                    self.dlg.pushButton_setTable.show()
                    self.dlg.pushButton_change.show()
                    rowPosition = self.dlg.tableWidget.rowCount()
                    self.dlg.tableWidget.insertRow(rowPosition)
                    self.dlg.tableWidget.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(str(box['vertex_index'])))
                    self.dlg.tableWidget.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(str(box['xcoord'])))
                    self.dlg.tableWidget.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(str(box['ycoord'])))
                # else:
                #     QMessageBox.information(None, "Внимание", "Данный id не обнаружен в выбранном слое ")
                #     self.dlg.pushButton_setTable.hide()
                #     self.dlg.pushButton_change.hide()
                #     return
                # print(box['xcoord'])
                # print(box['ycoord'])
            rows = self.dlg.tableWidget.rowCount()
            if rows == 0:
                QMessageBox.information(self.dlg, "Внимание", "Данный id не обнаружен в выбранном слое ")
                return
            self.dlg.pushButton_setTable.hide()
            self.dlg.pushButton_change.show()

        def change():
            mass_x = []
            mass_y = []
            string = "MultiPolygon("
            layer = self.dlg.mMapLayerComboBox_2.currentLayer()

            for box in layer.getFeatures():
                if box['id'] == self.dlg.spinBox.value():
                    for i in range(self.dlg.tableWidget.rowCount()):
                        mass_x.append(self.dlg.tableWidget.item(i, 1).text())
                        mass_y.append(self.dlg.tableWidget.item(i, 2).text())

                        string = string + f" ({self.dlg.tableWidget.item(i, 1).text()} " + f"{self.dlg.tableWidget.item(i, 2).text()}),"
            string = string[:-1] + ")"
            # print(string)

            list_of_points = []
            list_list = []
            try:
                for i, j in zip(mass_x, mass_y):
                    poi = QgsPointXY(float(i), float(j))
                    list_of_points.append(poi)
            except ValueError:
                QMessageBox.information(self.dlg, "Внимание", "Введите корректное значение в координаты ")
                self.dlg.pushButton_setTable.click()
                return 

            for i in list_of_points:
                list_list.append(QgsPointXY(i))

            print(list_list)
            layer.startEditing()
            feat = layer.getFeatures()

            if layer.geometryType() == 0:
                for ft in feat:
                    if ft['id'] == self.dlg.spinBox.value():
                        layer.changeGeometry(ft.id(), QgsGeometry.fromPointXY(list_list[0]))
            if layer.geometryType() == 1:
                for ft in feat:
                    if ft['id'] == self.dlg.spinBox.value():
                        layer.changeGeometry(ft.id(), QgsGeometry.fromPolylineXY(list_list))
            if layer.geometryType() == 2:
                for ft in feat:
                    if ft['id'] == self.dlg.spinBox.value():
                        layer.changeGeometry(ft.id(), QgsGeometry.fromPolygonXY([list_list]))

            layer.commitChanges()
            layer.triggerRepaint()
            self.dlg.pushButton_setTable.show()
            self.dlg.pushButton_change.hide()


        def field_select_2():
            self.dlg.tableWidget.setRowCount(0)
            self.dlg.pushButton_setTable.show()
            self.dlg.pushButton_change.hide()

        self.dlg.pushButton_setTable.clicked.connect(set_table)
        self.dlg.pushButton_change.clicked.connect(change)
        self.dlg.spinBox.valueChanged.connect(id_change)
        self.dlg.mMapLayerComboBox_2.currentIndexChanged.connect(field_select_2)

        self.dlg.mMapLayerComboBox.currentIndexChanged.connect(field_select)
        self.dlg.pushButton_ok.clicked.connect(apply_layer)
        self.dlg.pushButton_design.clicked.connect(back_design)
        self.dlg.pushButton_geometry.clicked.connect(back_geometry)

        result = self.dlg.exec_()
        # See if OK was pressed




